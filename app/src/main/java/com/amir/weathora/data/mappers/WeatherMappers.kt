package com.amir.weathora.data.mappersimport com.amir.weathora.data.WeatherDtoDataimport com.amir.weathora.data.WeatherDtoimport com.amir.weathora.domain.weather.WeatherDataimport com.amir.weathora.domain.weather.WeatherInfoimport com.amir.weathora.domain.weather.WeatherTypeimport java.time.LocalDateTimeimport java.time.LocalTimeimport java.time.format.DateTimeFormatterprivate data class IndexedWeatherData(    val index: Int,    val data: WeatherData)fun WeatherDtoData.toWeatherDataMap(): Map<Int, List<WeatherData>> {    return time.mapIndexed { index, time ->        val temperature = temperatures[index]        val weatherCode = weatherCodes[index]        val windSpeed = windSpeeds[index]        val pressure = pressures[index]        val humidity = humidities[index]        IndexedWeatherData(            index = index,            data = WeatherData(                time = LocalDateTime.parse(time, DateTimeFormatter.ISO_DATE_TIME),                temperatureCelsius = temperature,                pressure = pressure,                windSpeed = windSpeed,                humidity = humidity,                weatherType = WeatherType.fromWMO(weatherCode)            )        )    }.groupBy {        it.index / 24        // in the api response after  24 json ob the first day start    }.mapValues {        it.value.map { it.data }    }.also {        print(it.keys)    }}fun WeatherDto.toWeatherInfo(): WeatherInfo {    val weatherDataMap = weatherData.toWeatherDataMap()    val now = LocalTime.now()    val currentWeatherData = weatherDataMap[0]?.find {        val hour = if (now.minute < 30) now.hour else now.hour + 1        it.time.hour == hour    }    return  WeatherInfo(        weatherDataPerDay = weatherDataMap,        currentWeatherData = currentWeatherData    )}