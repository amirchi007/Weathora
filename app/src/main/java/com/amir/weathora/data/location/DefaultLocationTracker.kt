@file:OptIn(ExperimentalCoroutinesApi::class)package com.amir.weathora.data.locationimport android.Manifestimport android.app.Applicationimport android.content.Contextimport android.content.pm.PackageManagerimport android.location.Locationimport android.location.LocationManagerimport androidx.core.content.ContextCompatimport com.amir.weathora.domain.location.LocationTrackerimport com.google.android.gms.location.FusedLocationProviderClientimport dagger.hilt.android.qualifiers.ApplicationContextimport kotlinx.coroutines.ExperimentalCoroutinesApiimport kotlinx.coroutines.suspendCancellableCoroutineimport javax.inject.Injectimport kotlin.coroutines.resume@ExperimentalCoroutinesApiclass DefaultLocationTracker @Inject constructor(    private val locationClient: FusedLocationProviderClient,    @ApplicationContext private val context: Context): LocationTracker {    override suspend fun getCurrentLocation(): Location? {        val hasAccessFineLocationPermission = ContextCompat.checkSelfPermission(            context,            Manifest.permission.ACCESS_FINE_LOCATION        ) == PackageManager.PERMISSION_GRANTED        val hasAccessCoarseLocationPermission = ContextCompat.checkSelfPermission(            context,            Manifest.permission.ACCESS_COARSE_LOCATION        ) == PackageManager.PERMISSION_GRANTED        val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager        val isGpsEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER) ||                locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)        if(!hasAccessCoarseLocationPermission || !hasAccessFineLocationPermission || !isGpsEnabled) {            return null        }        return suspendCancellableCoroutine { cont ->            locationClient.lastLocation.apply {                if(isComplete) {                    if(isSuccessful) {                        cont.resume(result)                    } else {                        cont.resume(null)                    }                    return@suspendCancellableCoroutine                }                addOnSuccessListener {                    cont.resume(it)                }                addOnFailureListener {                    cont.resume(null)                }                addOnCanceledListener {                    cont.cancel()                }            }        }    }}