package com.amir.weathora.presentaionimport androidx.compose.runtime.getValueimport androidx.compose.runtime.mutableStateOfimport androidx.compose.runtime.setValueimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.amir.weathora.domain.location.LocationTrackerimport com.amir.weathora.domain.repository.WeatherRepositoryimport com.amir.weathora.domain.util.Resourceimport dagger.hilt.android.lifecycle.HiltViewModelimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass WeatherViewModel @Inject constructor(    private val repository: WeatherRepository) : ViewModel() {    var state by mutableStateOf(WeatherState())        private set    var temp by mutableStateOf(WeatherState().weatherInfo?.currentWeatherData?.temperatureCelsius)    var cityName by mutableStateOf<String?>(null)        private set    fun loadWeatherForCoordinates(lat: Double, lon: Double, city: String) {        cityName = city        viewModelScope.launch {            state = state.copy(                isLoading = true,                error = null            )            when (val result = repository.getWeatherData(lat, lon)) {                is Resource.Success -> {                    state = state.copy(                        weatherInfo = result.data,                        isLoading = false,                        error = null                    )                    temp = result.data?.currentWeatherData?.temperatureCelsius                }                is Resource.Error -> {                    state = state.copy(                        weatherInfo = null,                        isLoading = false,                        error = result.message                    )                }            }        }    }}